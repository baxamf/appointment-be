// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider           = "node node_modules/prisma-nestjs-graphql"
  output             = "../src/@generated"
  noAtomicOperations = "true"
  emitBlocks         = ["inputs", "models", "enums"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  USER
}

model User {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  password  String
  role      UserRole       @default(USER)
  profile   UserProfile?
  socials   UserSocial[]
  services  StaffService[]
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamp()

  @@index([id, email])
  @@map("users")
}

model UserProfile {
  id        Int     @id @map("user_id")
  user      User    @relation(fields: [id], references: [id], onDelete: Cascade)
  firstName String  @map("first_name")
  lastName  String? @map("last_name")
  phone     String
  avatar    String?
  bio       String?

  @@map("user_profiles")
}

model UserSocial {
  id     Int    @id @default(autoincrement())
  userId Int    @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  title  String
  link   String
  order  Int    @default(1)

  @@index([userId])
  @@map("user_socials")
}

model CompanyService {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  image         String
  order         Int            @default(1)
  staffServices StaffService[]
  tags          ServiceTag[]

  @@map("company_services")
}

model StaffService {
  id          Int            @id @default(autoincrement())
  userId      Int            @map("user_id")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId   Int            @map("service_id")
  service     CompanyService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  title       String?
  description String?
  price       Int?
  order       Int            @default(1)
  tags        ServiceTag[]

  @@index([userId])
  @@map("staff_services")
}

model ServiceTag {
  id              Int              @id @default(autoincrement())
  title           String
  staffServices   StaffService[]
  companyServices CompanyService[]

  @@map("service_tags")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider           = "node node_modules/prisma-nestjs-graphql"
  output             = "../src/@generated"
  noAtomicOperations = "true"
  emitBlocks         = ["inputs", "models", "enums"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  USER
}

model User {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  password             String
  role                 UserRole       @default(USER)
  profile              UserProfile?
  socials              UserSocial[]
  services             StaffService[]
  customerAppointments Appointment[]  @relation("customer_appointment")
  staffAppointments    Appointment[]  @relation("staff_appointment")
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([id, email])
  @@map("users")
}

model UserProfile {
  id        Int     @id @map("user_id")
  user      User    @relation(fields: [id], references: [id], onDelete: Cascade)
  firstName String  @map("first_name")
  lastName  String? @map("last_name")
  phone     String
  avatar    String?
  bio       String?

  @@map("user_profiles")
}

model UserSocial {
  id     Int    @id @default(autoincrement())
  userId Int    @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  title  String
  link   String
  order  Int    @default(1)

  @@index([userId])
  @@map("user_socials")
}

model CompanyService {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  image         String
  order         Int            @default(1)
  staffServices StaffService[]
  tags          ServiceTag[]

  @@map("company_services")
}

model StaffService {
  id           Int            @id @default(autoincrement())
  userId       Int            @map("user_id")
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId    Int            @map("service_id")
  service      CompanyService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  title        String?
  description  String?
  price        Int?
  duration     Int
  order        Int            @default(1)
  tags         ServiceTag[]
  appointments Appointment[]

  @@index([userId])
  @@map("staff_services")
}

model ServiceTag {
  id              Int              @id @default(autoincrement())
  title           String
  staffServices   StaffService[]
  companyServices CompanyService[]

  @@map("service_tags")
}

enum AppointmentStatus {
  PENDING
  FINISHED
  CANCELLED
}

model Appointment {
  id             Int               @id @default(autoincrement())
  status         AppointmentStatus @default(PENDING)
  staffServiceId Int               @map("service_id")
  staffService   StaffService      @relation(fields: [staffServiceId], references: [id])
  customerId     Int               @map("customer_id")
  customer       User              @relation("customer_appointment", fields: [customerId], references: [id])
  staffId        Int               @map("staff_id")
  staff          User              @relation("staff_appointment", fields: [staffId], references: [id])
  targetTime     DateTime          @map("target_time") @db.Timestamp(0)
  description    String?
  images         String[]
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([staffId])
  @@map("appointments")
}
